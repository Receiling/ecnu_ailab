#include <bits/stdc++.h>

using namespace std;

struct Point
{
    double x, y;
};
Point cities[200];
double cost[200][200];
int path[200];
int cnt;
double best;
double local_best;

/**********用于计算两点之间的距离**********/
double dis(Point p1, Point p2)
{
    return sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}

/**********从文件读入城市信息**********/
void read()
{
    FILE *fp_location = fopen("Cities(144).txt", "r");
    cnt = 0;
    double xx, yy;
    while(fscanf(fp_location, "%d%lf%lf", &cnt, &xx, &yy) != EOF)
    {
        cities[cnt].x = xx;
        cities[cnt].y = yy;
    }
    fclose(fp_location);
    for(int i = 1; i <= cnt; ++i)
        for(int j = 1; j <= cnt; ++j)
    {
        if(i == j)
        {
            cost[i][j] = 0.0;
            continue;
        }
        cost[i][j] = cost[j][i] = dis(cities[i], cities[j]);
    }
    return;
}

/**********生成一组随机解**********/
void GeneratePermutation()
{
	for(int i = 0; i < cnt; i++) path[i] = i + 1;

	int rand_index;

	for(int i = 1; i < cnt; i++)
	{
		// 考虑到N的数值可能很大，随机数由两段拼接而成
		rand_index = rand() % cnt;
        while(rand_index == 0) rand_index = rand() % cnt;
		swap(path[i], path[rand_index]);
	}
	return;
}

/*****************交换a,b位置的城市后评价值与之前的值************************/
double changePath(int a, int b)
{
    double tmp1 = cost[path[a]][path[(a + 1) % cnt]] + cost[path[b]][path[(b + 1) % cnt]] + cost[path[a]][path[(a - 1) % cnt]] + cost[path[b]][path[(b - 1) % cnt]];
    swap(path[a], path[b]);
    double tmp2 = cost[path[a]][path[(a + 1) % cnt]] + cost[path[b]][path[(b + 1) % cnt]] + cost[path[a]][path[(a - 1) % cnt]] + cost[path[b]][path[(b - 1) % cnt]];
    swap(path[a], path[b]);
    return tmp1 - tmp2;
}

/**********评价函数**********/
double evaluate()
{
    double sum = 0.0;
    for(int i = 0; i < cnt; ++i)
        sum = sum + cost[path[i]][path[(i + 1) % cnt]];
    return sum;
}

/**********局部搜索**********/
void Local_Search()
{
    best = 100000000.0;
    local_best = 100000000.0;
    int res = 0;
    while(res < 200)
    {
        GeneratePermutation();
        local_best = evaluate();
        bool ok = true;
        while(ok)
        {
            ok = false;
            for(int i = 1; i < cnt; ++i)
            {
                for(int j = i + 1; j < cnt; ++j)
                {
                    double gain = changePath(i, j);
                    if(gain > 1.0)
                    {
                        ok = true;
                        local_best -= gain;
                        swap(path[i], path[j]);
                    }
                }
                if(ok) break;
            }
        }
        if(best - local_best > 1.0)
        {
            res = 0;
            best = local_best;
        }
        else res += 1;
        //printf("%.3f\n", local_best);
    }
    return;
}

int main()
{
    read();
    double min_x = 10000000000.0;
    for(int i = 0; i < 20; ++i)
    {
        srand((unsigned)time(0));
        Local_Search();
        //printf("%.3f\n", best);
        if(best < min_x)
            min_x = best;
    }
    printf("%.3f\n", min_x);
    return 0;
}

